import { Card, CardTag } from '../apps/shared/classes/card.class';
import { Currencies } from '../apps/shared/classes/currencies.class';
import { Progression } from '../apps/shared/interfaces/card-factory.interface';

export const CARDS: Card[] = [
    new Card(
        'Getting Started',
        '',
        0,
        'start',
        'Welcome! You can start Kurkudos with this task. Record an 1km activity and take a selfie with a thumbs up',
        Currencies.withPoints(1).withExperience(20),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1000',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Starry Night',
        'full_moon',
        0,
        'full_moon',
        "Do an activity at night under clear skies. Take a photo of the moon or the starry sky",
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Tour de Park',
        'park',
        0,
        '3_parks',
        'Visit 3 different parks during one non-stop activity. Take a selfie in each park',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Namesake City',
        'city',
        0,
        'namesake_city',
        "Visit a town/city that has the same first letter as your name (e.g. Jurmala for Janis). If such city does not exist in your country, you may use the next letter of your name. Take a selfie at city's iconic sight",
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Namesake Village',
        'village',
        0,
        'namesake_village',
        'Visit a village that has the same first 2 letters as your name (e.g. JAunciems for JAnis). Take a selfie at in that village',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Two Cities',
        '2_cities',
        0,
        '2_cities',
        'Visit two different cities during one non-stop activity. Take a selfie in each city',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'My Favorite Place',
        'favorite_place',
        0,
        'favorite_place',
        "Visit some of your special favorite places that you would like to recommend to others. Take a selfie at that place. Don't be silly, put some effort into it, don't just take a selfie on your couch",
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Forrest Gump',
        '',
        0,
        'forest',
        'Do an activity in a forest',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Checkpoint A-E',
        '',
        0,
        'checkpoint_ae',
        "Do an activity in a town or city starting with any of the letters from A to E. Take a selfie at city's iconic sight",
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Checkpoint F-J',
        '',
        0,
        'checkpoint_fj',
        "Do an activity in a town or city starting with any of the letters from F to J. Take a selfie at city's iconic sight",
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Checkpoint K-O',
        '',
        0,
        'checkpoint_ko',
        "Do an activity in a town or city starting with any of the letters from K to O. Take a selfie at city's iconic sight",
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Checkpoint P-T',
        '',
        0,
        'checkpoint_pt',
        "Do an activity in a town or city starting with any of the letters from P to T. Take a selfie at city's iconic sight",
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Checkpoint U-Z',
        '',
        0,
        'checkpoint_uz',
        "Do an activity in a town or city starting with any of the letters from U to Z. Take a selfie at city's iconic sight",
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Other Coast',
        '',
        0,
        'other_coast',
        'Do an activity going along the river. Do half of the distance on one side and the other half on the other side',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Baywatch',
        '',
        0,
        'baywatch',
        'Do an activity along the seashore',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Back to Work',
        '',
        0,
        'work',
        'Do an activity going to the location of your workplace (present or previous one)',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Parkway Drive',
        '',
        0,
        'park',
        'Do an activity in a park',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Park 100%',
        'park_bench',
        0,
        'park_100',
        'Travel along every possible path (cover it completely on a map) in one of the parks during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Sunset Sarsaparilla',
        '',
        0,
        'sunset',
        'Do an activity during a sunset',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Pondkeeper',
        '',
        0,
        'pond',
        'Do an activity doing at least 3 loops around a pond',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Long Island',
        '',
        0,
        'island',
        'Do an activity on an island',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Tequila Sunrise',
        '',
        0,
        'sunrise',
        'Do an activity during a sunrise',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        "Get Shrek'd",
        '',
        0,
        'swamp',
        'Do an activity in a swamp (any kind of wetland)',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'TRAINing Season',
        '',
        0,
        'train',
        'Either start or finish your activity right after/before you took a train ride',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'King of the Hill',
        '',
        0,
        'hill',
        'Climb the highest hill in your city at least 5 times',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Raining Man',
        '',
        0,
        'rain',
        'Do an activity outside in the rain',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Burning Man',
        '',
        0,
        'burning_man',
        'Do an activity in a hot weather (over 25 degrees Celsius)',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Night Rider',
        '',
        0,
        'night',
        'Do an activity during the night hours (after 12pm)',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'King in the Castle',
        '',
        0,
        'castle',
        'Do an activity visiting a medieval castle (or ruins of a medieval castle)',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),
    new Card(
        'Fish Patrol',
        '',
        0,
        'lake',
        'Do an activity doing a full loop around a lake',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.wanderer]
    ),




    new Card(
        'Swimming bird',
        'duck',
        0,
        'swimming_bird',
        'Take a clear photo of an any swimming bird during your activity (duck, swan, gull, etc.). Bird should be identifiable.',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Forest bird',
        'great_tit',
        0,
        'forest_bird',
        'Take a clear photo of an any forest bird (woodpecker, tit, blackbird, treecreeper, etc.) in a forest during your activity. Bird should be identifiable.',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Urban bird',
        'urban_bird',
        0,
        'urban_bird',
        'Take a clear photo of an any urban bird (pigeon, sparrow, crow, etc.) in city environment during your activity. Bird should be identifiable.',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Wetland bird',
        'wetland_bird',
        0,
        'wetland_bird',
        'Take a clear photo of an any wetland bird (moorhen, coot, crake) in wetland (swamp, marsh, etc.) environment during your activity. Bird should be identifiable.',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Field bird',
        'field_bird',
        0,
        'field_bird',
        'Take a clear photo of an any field bird (swallow, wagtail, wheateater etc.) in an open field during your activity. Bird should be identifiable.',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Wading bird',
        'water_rail',
        0,
        'wading_bird',
        'Take a clear photo of an any wading bird (long legged birds, storks, herons, sandpipers, lapwings, etc.) during your activity. Bird should be identifiable.',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Smelly cat',
        'cat',
        0,
        'homeless_cat',
        'Take a clear photo of a wild or homeless cat during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Medium Rare',
        'hare',
        0,
        'medium_animal',
        'Take a clear photo of medium sized wild animal (e.g.: Fox, Hare, Hedgehog, Beaver, etc.) in a wild during your activity',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Extra Large',
        'deer',
        0,
        'large_animal',
        'Take a clear photo of large wild animal (e.g.: Deer, Moose, Bear, Boar, etc.) in a wild during your activity',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Bird Feeder',
        '',
        0,
        'bird_feeder',
        "Feed birds during your activity. Take a photo of the happy birds. Check for suitable foods before feeding them! Don't feed them bread",
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Birdhouse',
        'birdhouse',
        0,
        'birdhouse',
        'Take a photo of a bird that is sitting in a birdhouse or in a bird feeder during your activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Contact zoo',
        'zoo',
        0,
        'contact_zoo',
        'Visit a contact zoo. Take a photo of you petting or feeding an animal during your activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Big gang',
        'big_bird_group',
        0,
        'big_bird_group',
        'Take a photo of a big bird group of the same species during your activity. The group must be at least 30 birds',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Squadron',
        'v_formation',
        0,
        'v_formation',
        'Take a photo of a bird group flying in a V-formation during your activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Good Boy',
        'dog',
        0,
        'pet_dog',
        'Walk or pet a dog during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Small Bois',
        'squirrel',
        0,
        'small_animal',
        'Take a clear photo of small sized wild animal (e.g.: Mouse, Squirrel, Bat, etc.) in a wild during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Cold Blooded',
        'grass_snake',
        0,
        'cold_blooded',
        'Take a clear photo of cold blooded wild animal (e.g.: Lizard, Snake, Toad, etc.) in a wild during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Jack Sparrow',
        '',
        0,
        'sparrow',
        'Take a clear photo of a sparrow during your activity',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Back in Black',
        '',
        0,
        'blackbird',
        'Take a clear photo of a common blackbird or a starling during your activity',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Seagull',
        '',
        0,
        'seagull',
        'Take a clear photo of a seagull during your activity',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Sonic the Hedgehog',
        '',
        0,
        'hedgehog',
        'Take a clear photo of a hedgehog during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Russel Crow',
        '',
        0,
        'crow',
        'Take a clear photo of a crow (raven) during your activity',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Great tit!',
        '',
        0,
        'tit',
        'Take a clear photo of a great tit (bird) or any other subtype',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Mr National Bird',
        '',
        0,
        'wagtail',
        'Take a clear photo of a wagtail during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Stork',
        '',
        0,
        'stork',
        'Take a clear photo of a stork during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Long Neck',
        'heron',
        0,
        'heron',
        'Take a clear photo of a heron or a crane bird during your activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Magpie',
        '',
        0,
        'magpie',
        'Take a clear photo of a magpie during your activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Bugs Bunny',
        '',
        0,
        'hare',
        'Take a clear photo of a hare in the wild during your activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Duck Tales',
        'duck',
        0,
        'duck',
        'Take a clear photo of a duck during your activity',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Happy Tree Friends',
        '',
        0,
        'tree_friends',
        'Take a clear photo of a fox, deer or a beaver in the wild during your activity',
        Currencies.withPoints(1).withExperience(24),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Cowboy',
        '',
        0,
        'cowboy',
        'Take a clear photo of a horse or a cow during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Swan Lake',
        '',
        0,
        'swan',
        'Take a clear photo of a swan during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Bandit Gull',
        '',
        0,
        'black_headed_gull',
        'Take a clear photo of a black headed gull during your activity',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Squirrel',
        '',
        0,
        'squirrel',
        'Take a clear photo of a squirrel in the wild during your activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Swallow',
        '',
        0,
        'swallow',
        'Take a clear photo of a swallow during your activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Pigeon',
        '',
        0,
        'pigeon',
        'Take a clear photo of a pigeon during your activity',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Woody Woodpecker',
        '',
        0,
        'woodpecker',
        'Take a clear photo of a woodpecker during your activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'G.O.A.T.',
        '',
        0,
        'goat',
        'Take a clear photo of a goat or a sheep during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Mother of Dragons',
        '',
        0,
        'snake',
        'Take a clear photo of a lizard or a snake in a wild during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Long bois',
        '',
        0,
        'ferret',
        'Take a clear photo of a weasel, otter or a ferret in a wild during your activity',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Full House',
        '',
        0,
        'full_house',
        'Take a clear photo of a 3 different kind of birds in a single shot during your activity',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Ornithologist 1',
        '',
        0,
        'ornithologist_1',
        "Take a clear photo of any kind of bird (in the wild) that wasn't mentioned in any of the previous tasks during your activity",
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Ornithologist 2',
        '',
        0,
        'ornithologist_2',
        "Take a clear photo of any kind of bird (in the wild) that wasn't mentioned in any of the previous tasks during your activity",
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),
    new Card(
        'Born to be Wild',
        '',
        0,
        'wild',
        "Take a clear photo of any kind of wild animal that wasn't mentioned in any of the previous tasks during your activity",
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.photohunter]
    ),

    new Card(
        'Cardio',
        '',
        0,
        'cardio',
        'Do any kind of cardio workout (besides running, walking or riding a bike)',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Sweat Machine',
        'threadmill',
        0,
        'cardio_indoor',
        'Do any kind of cardio workout using a cardio machine (treadmill, elliptical, etc.)',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Game On',
        '',
        0,
        'game',
        'Take part in any kind of active sports game',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Free weights',
        'dumbbell',
        0,
        'free_weights',
        'Do any kind of workout with free weights (dumbbells, kettlebells, barbells)',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Fitness',
        'fitness',
        0,
        'fitness',
        'Do any kind of fitness workout of your choice',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Fitness Outdoors',
        'fitness_outdoor',
        0,
        'fitness_outdoor',
        'Do any kind of fitness workout of your choice outdoors',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Active Healing',
        'physiotherapy',
        0,
        'physiotherapy',
        'Do some active healing session. Visit a physiotherapist or do any kind of physiotherapy exercises yourself',
        Currencies.withPoints(1).withExperience(3),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Keep on Rolling',
        'skateboard',
        0,
        'rolling',
        'Ride on anything non-motorized. (except bicycle)',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Roller Blades',
        'roller_blades',
        0,
        'roller_blades',
        'Ride on roller blades, roller skates, roller skis, ice skates etc.',
        Currencies.withPoints(1).withExperience(4),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Pedal power',
        'paddle_boat',
        0,
        'pedaling',
        'Ride anything pedal-powered (except regular bicycle), tandem, tricycle, pedal boat etc.',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Warmup',
        '',
        0,
        'warmup',
        'Do any kind of warmup before your main activity',
        Currencies.withPoints(1).withExperience(3),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '900',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Cooldown',
        '',
        0,
        'cooldown',
        'Do any kind of cooldown after your main activity',
        Currencies.withPoints(1).withExperience(3),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '900',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Ball game',
        'football',
        0,
        'ball_game',
        'Play any kind of ball game (football, basketball, volleyball, etc.)',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Rackets',
        'rackets_outdoor',
        0,
        'rackets',
        'Play any kind of racket sport (tennis, squash, table tennis etc.)',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Rackets (indoor)',
        '',
        0,
        'rackets_indoor',
        'Play any kind of racket sport (table tennis, squash, etc.) indoors',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Rackets (outdoor)',
        '',
        0,
        'rackets_outdoor',
        'Play any kind of racket sport (tennis, badminton, etc.) outdoors',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Mister Fantastic',
        '',
        0,
        'yoga',
        'Do a yoga/stretching/pilates workout',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Tony Hawk',
        '',
        0,
        'ground_board',
        'Do an activity on a skateboard, longboard or similar',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Climber',
        '',
        0,
        'climber',
        'Do a bouldering or climbing activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Competitor',
        'cup_2',
        0,
        'competitor',
        'Participate in any official competition/race during your activity',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1200',
                property: 'elapsed_time',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Bodyweight',
        '',
        0,
        'bodyweight',
        'Do any kind of bodyweight workout (calisthenics, etc.)',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Motor Racing',
        '',
        0,
        'motor',
        'Do an activity on karting, quad/cross bike on a specialized track',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '600',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Rowing',
        '',
        0,
        'rowing',
        'Do any kind of activity, that involves rowing. Kayaking, SUP, rowing machine etc.',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Aquaman',
        '',
        0,
        'aquaman',
        'Do a swimming activity, either in a pool or in an open water',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Team Game',
        'basketball',
        0,
        'team_game',
        'Participate in any kind of active team sports game',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Group Workout',
        '',
        0,
        'group_workout',
        'Do any kind of group workout with at least 3 other people',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Water Boards',
        '',
        0,
        'water_boards',
        'Do an activity on a wakeboard, kiteboard, surfboard, SUP or similar',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1200',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Ground Boards',
        'groundboards',
        0,
        'ground_boards',
        'Do an activity on a skateboard, longboard, balance board or similar',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1200',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Step Up',
        '',
        0,
        'dance',
        'Do any kind of active dancing activity, zumba or actual dance',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Hike',
        '',
        0,
        'hike',
        'Go for a hike outside of a city',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Indoor Bike',
        '',
        0,
        'indoor_bike',
        'Do an indoor cycling workout',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Martial Arts',
        '',
        0,
        'martial_arts',
        'Do any kind of martial arts activity',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Obstacle course',
        '',
        0,
        'obstacle',
        'Visit an obstacle course park or participate in a obstacle course race',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other,bike',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Treadmill',
        '',
        0,
        'treadmill',
        'Do an activity on a treadmill',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other,run',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),

    new Card(
        'Ready to race',
        'cup_1',
        0,
        'race',
        'Participate in any official race during your activity',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1200',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'ride,run',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Going Wild',
        'trail_run',
        0,
        'trail_run_ride',
        'Do a run or ride on a trails, off-road or gravel roads',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Pool Party',
        'swim_1',
        0,
        'swim_1',
        'Do a swimming activity, cover a distance of at least 500 meters',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '500',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Wave Maker',
        'swim_2',
        0,
        'swim_2',
        'Do a swimming activity, cover a distance of at least 1000 meters',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1000',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Motorboat',
        'swim_3',
        0,
        'swim_3',
        'Do a swimming activity, cover a distance of at least 1500 meters',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1500',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),

    new Card(
        'Squad Goals',
        'group_run_1',
        0,
        'group_run_ride',
        'Do a run, ride, or walk in a group of 3 or more people',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'More the Merrier',
        'group_run_2',
        0,
        'group_run_ride_2',
        'Do a run, ride, or walk in a group of 10 or more people',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Farther Together',
        'group_run_3',
        0,
        'group_run_ride_3',
        'Do a longer run, ride, or walk in a group of 3 or more people',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '3 * distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Combo Meal',
        'just_a_workout',
        0,
        'combo_meal',
        'Do a multiple different activity types during a single workout (run, ride, swim, etc.)',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '5000',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,other,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Just a Workout',
        '',
        0,
        'workout_1',
        'Just a regular workout, run, ride or walk, no special tasks here',
        Currencies.withPoints(1).withExperience(3),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'A bit longer Workout',
        '',
        0,
        'workout_2',
        'Just a regular workout, run, ride or walk, no special tasks here',
        Currencies.withPoints(1).withExperience(3),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 1.5',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Long Workout',
        '',
        0,
        'workout_3',
        'Just a regular workout, run, ride or walk, no special tasks here',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 2',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Going Up',
        'elevation_1',
        0,
        'elevation_1',
        'Record an activity with at least of 150 meters of elevation gain. For the best accuracy, use a device that can reliably track elevation gain.',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '150',
                property: 'total_elevation_gain',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Going Higher',
        'elevation_2',
        0,
        'elevation_2',
        'Record an activity with at least of 300 meters of elevation gain. For the best accuracy, use a device that can reliably track elevation gain.',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '300',
                property: 'total_elevation_gain',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Going Even Higher',
        'elevation_3',
        0,
        'elevation_3',
        'Record an activity with at least of 500 meters of elevation gain. For the best accuracy, use a device that can reliably track elevation gain.',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '500',
                property: 'total_elevation_gain',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Going to the Top',
        'elevation_4',
        0,
        'elevation_4',
        'Record an activity with at least of 750 meters of elevation gain. For the best accuracy, use a device that can reliably track elevation gain.',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '750',
                property: 'total_elevation_gain',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'No Slacking',
        'speed_1',
        0,
        'speed_1',
        'Just a regular run/ride, but you gotta watch your pace',
        Currencies.withPoints(1).withExperience(6),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'average_speed * 1.05',
                property: 'average_speed',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Fast & Furious',
        'speed_1',
        0,
        'speed_2',
        'Just a regular run/ride, but you gotta pick up the pace',
        Currencies.withPoints(1).withExperience(9),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'average_speed * 1.1',
                property: 'average_speed',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        '2 Fast 2 Furious',
        'speed_3',
        0,
        'speed_3',
        'Just a regular run/ride, but you gotta pick up the pace',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'average_speed * 1.15',
                property: 'average_speed',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        '3 Fast 3 Furious',
        'speed_4',
        0,
        'speed_4',
        'Just a regular run/ride, but you gotta pick up the pace',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'average_speed * 1.20',
                property: 'average_speed',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        '4 Fast 4 Furious',
        'speed_5',
        0,
        'speed_5',
        'Just a regular run/ride, but you gotta pick up the pace',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'average_speed * 1.25',
                property: 'average_speed',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        '5 Fast 5 Furious',
        'speed_5',
        0,
        'speed_6',
        'Just a regular run/ride, but you gotta pick up the pace',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'average_speed * 1.3',
                property: 'average_speed',
            },
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Fast & Far',
        'speed_5',
        0,
        'speed_distance_1',
        'Run/ride that is both fast and long',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'average_speed * 1.10',
                property: 'average_speed',
            },
            {
                comparator: 'greater',
                formula: 'distance * 3',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Not Gonna Get Us',
        'not_human_anymore',
        0,
        'speed_distance_2',
        'Run/ride that is both fast and long',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'average_speed * 1.20',
                property: 'average_speed',
            },
            {
                comparator: 'greater',
                formula: 'distance * 2',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Highway to Hell',
        'invincible',
        0,
        'highway',
        'Record an activity travelling on a highway (any paved road outside of a city)',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 2',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Going far',
        '',
        0,
        'machine_1',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(12),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 2',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Far from Home',
        '',
        0,
        'machine_2',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 3',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        "Can't stop",
        '',
        0,
        'machine_3',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 4',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        "Won't stop",
        '',
        0,
        'machine_4',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 5',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'I am Machine',
        '',
        0,
        'machine_5',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(24),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 6',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Not Human Anymore',
        '',
        0,
        'machine_6',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(30),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 7',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Unstoppable',
        '',
        0,
        'machine_7',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(33),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 8',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Invincible',
        '',
        0,
        'machine_8',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(36),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 9',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Where am I',
        '',
        0,
        'machine_9',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(39),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 10',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),
    new Card(
        'Need Fuel',
        '',
        0,
        'machine_10',
        'Record a long distance activity',
        Currencies.withPoints(1).withExperience(42),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance * 12',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.hardworker]
    ),

    new Card(
        'So Interesting',
        '',
        0,
        'so_interesting',
        'Do an activity in a small loop. Do at least 30 identical loops. You CAN alternate direction',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Lunch Break',
        'lunch',
        0,
        'lunch',
        'Do an activity during a your lunch break on a workday',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Ant-Man',
        'anthill',
        0,
        'anthill',
        'During your activity find a take a photo of a huge (at least 50cm tall) anthill',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Emergency',
        'emergency',
        0,
        'emergency',
        'During your activity take a photo of 3 vehicles: fire truck, ambulance, and a police car',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Mr Proper',
        'lawnmover',
        0,
        'cleaning',
        'Do a physically demanding house chores as an activity, deep cleaning, lawn mowing, construction etc.',
        Currencies.withPoints(1).withExperience(15),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Toretto Family',
        'family_photo',
        0,
        'family',
        'Do any activity with your family member(s)',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride,other',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Pitstop',
        'pitstop',
        0,
        'pitstop',
        'Take a break to eat something during your activity. Take a photo of the food to brag about it',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Refreshing',
        'free_swim',
        0,
        'free_swim',
        'Do a swimming activity in an open body of water (lake, sea, river, etc.)',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '600',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Hungry cat',
        'cat',
        0,
        'feed_homeless_cat',
        'Feed homeless cat during your activity',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'In a Matrix',
        'red_dress',
        0,
        'red_dress',
        'Take a photo of a person in a red dress during your activity',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Party Hard',
        'dance',
        0,
        'real_dance',
        'Go for a dance, visit party, rave, concert, club, etc.',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: '1800',
                property: 'elapsed_time',
            },
            {
                comparator: 'in',
                formula: 'other',
                property: 'type',
            },
        ],
        false,
        [CardTag.multitasker]
    ),
    new Card(
        'Street Cred',
        'city_2',
        0,
        'street_name',
        'Choose 5 streets so that each street name begins with one of the first 5 letters of your name, one letter per street (e.g. Janis - Jeruzalemes, Avotu, Nicgales...). Visit each street and take a selfie with its sign. If your name is shorter than 5 letters, use your last name as well',
        Currencies.withPoints(1).withExperience(24),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Mushroom Hunter',
        'mushroom',
        0,
        'mushroom',
        'Spot some edible mushrooms during your activity. No need to eat them right away - just take a photo of your catch.',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Environmentally Friendly',
        '',
        0,
        'bottle',
        'During your activity drop some bottles on deposit station',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        []
    ),
    new Card(
        'Autograph',
        '',
        0,
        'autograph',
        'During your activity draw your initials on a map with a GPS tracking line',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        []
    ),
    new Card(
        'Creeper',
        '',
        0,
        'creeper',
        'During your activity ask a stranger (that is doing the same activity as you, e.g. running) to take a selfie with you. Both of you must show a thumbs up',
        Currencies.withPoints(1).withExperience(24),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        []
    ),
    new Card(
        'Cool Car',
        'sports_car',
        0,
        'sports_car',
        'Take a photo of a cool looking exotic sports car during your activity',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        []
    ),
    new Card(
        'Team Up',
        '',
        0,
        'avengers',
        'Record an activity together with at least 3 other people that are also participating in Kurkudos',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        []
    ),
    new Card(
        'Legendary',
        '',
        0,
        'local_legend',
        'Get a Local Legend status during you activity on any of the Strava segments',
        Currencies.withPoints(1).withExperience(24),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        []
    ),
    new Card(
        'Early Halloween',
        '',
        0,
        'halloween',
        'Do an activity in a costume, be creative!',
        Currencies.withPoints(1).withExperience(24),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        []
    ),
    new Card(
        'Full Bloom',
        'flower',
        0,
        'flower_field',
        'Take a photo of yourself in a flower field during your activity',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
    new Card(
        'Closet Cleaner',
        '',
        0,
        'donate_clothes',
        'Donate some clothes to a charity during your activity',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride,walk',
                property: 'type',
            },
        ],
        false,
        []
    ),
    new Card(
        'Speedster',
        'speed_4',
        0,
        'speed_pr',
        'During your activity set a new personal record on any of the Strava segments',
        Currencies.withPoints(1).withExperience(21),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,ride',
                property: 'type',
            },
        ],
        false,
        []
    ),
    new Card(
        'One Direction',
        '',
        0,
        'one_direction',
        'Do an activity travelling in a line as straight as possible',
        Currencies.withPoints(1).withExperience(18),
        1,
        0,
        { progression: 0, usesToProgress: 0 },
        'null',
        Progression.NONE,
        [
            {
                comparator: 'greater',
                formula: 'distance',
                property: 'distance',
            },
            {
                comparator: 'in',
                formula: 'run,walk,ride',
                property: 'type',
            },
        ],
        false,
        [CardTag.special]
    ),
];
